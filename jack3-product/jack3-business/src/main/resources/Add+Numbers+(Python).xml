<ExportedExercise id="1">
  <name>Add Numbers (Python)</name>
  <publicDescription></publicDescription>
  <internalNotes></internalNotes>
  <language>de</language>
  <difficulty>0</difficulty>
  <resources id="2"/>
  <stages id="3">
    <de.uni__due.s3.jack3.entities.stagetypes.python.PythonStage id="4">
      <internalName>#1</internalName>
      <externalName></externalName>
      <taskDescription>Definieren sie eine Funktion &lt;em&gt;add&lt;/em&gt;. Die Funktion soll zwei Parameter entgegennehmen und das Ergebnis der Addition zur&amp;uuml;ckgeben.</taskDescription>
      <defaultTransition id="5">
        <conditionExpression id="6">
          <domain>MATH</domain>
        </conditionExpression>
        <stageExpression id="7">
          <domain>MATH</domain>
        </stageExpression>
        <isRepeat>false</isRepeat>
      </defaultTransition>
      <skipTransitions id="8"/>
      <stageTransitions id="9"/>
      <hints id="10">
        <StageHint id="11">
          <stagehint__order>0</stagehint__order>
          <text>Die Funktionsdeklaration sollte in etwa so aussehen:&lt;br /&gt;
&lt;em&gt;def add(a,b):&lt;/em&gt;&lt;br /&gt;
&lt;br /&gt;
Jetzt m&amp;uuml;ssen sie noch den Inhalt der Funktion erg&amp;auml;nzen</text>
          <malus>0</malus>
          <stage class="de.uni_due.s3.jack3.entities.stagetypes.python.PythonStage" reference="4"/>
        </StageHint>
      </hints>
      <variableUpdatesBeforeCheck id="12"/>
      <variableUpdatesAfterCheck id="13"/>
      <variableUpdatesOnNormalExit id="14"/>
      <variableUpdatesOnRepeat id="15"/>
      <variableUpdatesOnSkip id="16"/>
      <weight>1</weight>
      <orderIndex>0</orderIndex>
      <allowSkip>false</allowSkip>
      <resources id="17"/>
      <ignorePendingJobs>false</ignorePendingJobs>
      <propagateInternalErrors>false</propagateInternalErrors>
      <gradingSteps class="linked-list" id="18">
        <de.uni__due.s3.jack3.entities.stagetypes.python.TracingPythonGradingConfig id="19">
          <isActive>false</isActive>
          <hasVisibleResult>false</hasVisibleResult>
          <hasVisibleFeedback>false</hasVisibleFeedback>
          <isAsync>false</isAsync>
          <weight>1</weight>
          <fileNames id="20"/>
          <sourceFiles id="21"/>
          <libraryFiles id="22"/>
          <testDriver># This Python file uses the following encoding: utf-8
import Communicator
import Demoprojekt as de
import Trace


# value between 0 - 100 for assessing test case

@Communicator.decorator
def testcase1():
    try:

        assert de.add(1, 0) == 1
        Trace.printResult(25)
    except Exception:
        Trace.printResult(0,&quot;Testcase1 ist fehlgeschlagen tats√§chlicher Wert ist &apos;{0}&apos; und erwarteter Wert ist 0&quot;)


@Communicator.decorator
def testcase2():
    try:

        assert de.add(7, 9) == 16
        Trace.printResult(25)
    except Exception as e:
        Trace.printResult(0)


@Communicator.decorator
def testcase3():
    try:

        assert de.add(-5, 9) == 4
        Trace.printResult(25)
    except Exception as e:
        Trace.printResult(0)


@Communicator.decorator
def testcase4():
    try:

        assert de.add(-2, 4) == 2
        Trace.printResult(25)
    except Exception as e:
        Trace.printResult(0)


if __name__ == &apos;__main__&apos;:
    print(&apos;testcase1...&apos;)
    testcase1()
    print(&apos;testcase2...&apos;)
    testcase2()
    print(&apos;testcase3...&apos;)
    testcase3()
    print(&apos;testcase4...&apos;)
    testcase4()

</testDriver>
          <studentModule>Demoprojekt</studentModule>
          <timeoutSeconds>10</timeoutSeconds>
        </de.uni__due.s3.jack3.entities.stagetypes.python.TracingPythonGradingConfig>
      </gradingSteps>
    </de.uni__due.s3.jack3.entities.stagetypes.python.PythonStage>
  </stages>
  <startStage class="de.uni_due.s3.jack3.entities.stagetypes.python.PythonStage" reference="4"/>
  <variableDeclarations id="23"/>
  <jSXGraphs id="24"/>
  <resultFeedbackMappings id="25"/>
</ExportedExercise>